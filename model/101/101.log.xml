<log>
 <logged on="run">
  <config>
   <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
   <alias id="folder">/mnt/nm730CD</alias>
   <alias id="target">/opt/NONMEM/nm73</alias>
   <alias id="origin">/mnt/nmqual-8.3.3</alias>
   <alias id="unlock">/mnt/nonmem.lic</alias>
   <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
   <!--The meta interface groups commands that collect metadata.-->
   <do on="meta">pwd</do>
   <do on="meta">date</do>
   <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
   <do on="meta">echo $SHELL</do>
   <do on="meta">echo $USER</do>
   <do on="meta">echo $PATH</do>
   <do on="meta">head -n 5 target/util/nmfe73</do>
   <do on="meta">which ifort</do>
   <!--The 'install' interface installs NONMEM.-->
   <do on="install">date</do>
   <do on="install">rm -rf origin/temp</do>
   <do on="install">mkdir origin/temp</do>
   <do on="install">cp -r folder/* origin/temp</do>
   <do on="install" in="origin">patch -p0 &lt; nix/setup73.diff</do>
   <!--alters compile options in setup73-->
   <do on="install">rm -rf target</do>
   <do on="install">mkdir target</do>
   <do on="install" in="origin/temp">pwd</do>
   <do on="install" in="origin/temp">ifort --version</do>
   <do on="install" in="origin/temp">/bin/bash SETUP73 origin/temp target ifort y ar same rec q unzip nonmem73e.zip nonmem73r.zip</do>
   <do on="install">mkdir target/nmqual</do>
   <do on="install">mkdir target/nmqual/doc</do>
   <do on="install">cp $0 target/nmqual</do>
   <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
   <do on="install">cp -r origin/con target/nmqual</do>
   <!--support for processing xml docs-->
   <do on="install">cp -r origin/csv target/nmqual</do>
   <!--support for processing csv docs-->
   <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
   <!--reference modeling results-->
   <do on="install">cp -r origin/psn target/nmqual</do>
   <!--support for psn qualification-->
   <do on="install">cp origin/nix/setup73.diff target/nmqual/doc</do>
   <!--keep for archival purposes-->
   <do on="install">cp origin/temp/SETUP73 target/nmqual/doc</do>
   <!--keep for archival purposes-->
   <do on="install">rm -rf origin/temp</do>
   <do on="install">cp -r origin/test target/nmqual</do>
   <!--supports control tests-->
   <do on="install">chmod 0777 target/license/nonmem.lic</do>
   <!--enable overwriting-->
   <do on="install">cp unlock target/license/nonmem.lic</do>
   <!--replace expired license-->
   <do on="install">cp mpicha target/mpi/mpi_lini</do>
   <!--replace default mpich archive-->
   <!--replace util/nmfe73 and run/nmfe73 to accept compile/execute option-->
   <do on="install">cp origin/nix/nmfe73 target/util</do>
   <do on="install">cp origin/nix/nmfe73 target/run</do>
   <do on="install" as="xml">perl $0 $_0 meta</do>
   <to on="install">target/nmqual/log.xml</to>
   <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
   <!--Run directory and run name are required arguments.-->
   <do on="basic" as="xml">perl $0 $_0 meta</do>
   <do on="basic" in="$_1">target/util/nmfe73 $_2.ctl $_2.lst</do>
   <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="basic" as="xml">cat target/nmqual/log.xml</do>
   <to on="basic">$_1/$_2.log.xml</to>
   <!--The 'run' interface expects a leading compile/execute argument.-->
   <do on="run" as="xml">perl $0 $_0 meta</do>
   <do on="run" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst</do>
   <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="run" as="xml">cat target/nmqual/log.xml</do>
   <to on="run">$_2/$_3.log.xml</to>
   <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
   <do on="para" as="xml">perl $0 $_0 meta</do>
   <do on="para" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
   <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="para" as="xml">cat target/nmqual/log.xml</do>
   <to on="para">$_2/$_3.log.xml</to>
   <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
   <do on="test" in="target/nmqual/test">target/util/nmfe73 $_1.ctl $_1.lst</do>
   <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
   <!--The 'qualify' interface runs a full suite of qualification tests.-->
   <do on="qualify" as="xml">perl $0 $_0 meta</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
   <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
   <to on="qualify">$_1</to>
   <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
   <do on="regress" as="xml">perl $0 $_0 meta</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
   <do on="regress" as="xml">cat target/nmqual/log.xml</do>
   <to on="regress">$_1</to>
   <!--The 'psntest' interface runs PsN control tests.-->
   <do on="psntest" as="xml">perl $0 $_0 meta</do>
   <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
   <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
   <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.nmctl.csv</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.nmctl.csv</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
   <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
   <to on="psntest">$_1</to>
   <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
   <do on="accept">echo $_</do>
   <to on="accept">$0</to>
  </config>
  <job>
   <do>perl /opt/NONMEM/nm73/nmqual/autolog.pl /opt/NONMEM/nm73/nmqual/log.xml meta</do>
   <so>
    <log>
     <logged on="meta">
      <config>
       <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
       <alias id="folder">/mnt/nm730CD</alias>
       <alias id="target">/opt/NONMEM/nm73</alias>
       <alias id="origin">/mnt/nmqual-8.3.3</alias>
       <alias id="unlock">/mnt/nonmem.lic</alias>
       <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
       <!--The meta interface groups commands that collect metadata.-->
       <do on="meta">pwd</do>
       <do on="meta">date</do>
       <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
       <do on="meta">echo $SHELL</do>
       <do on="meta">echo $USER</do>
       <do on="meta">echo $PATH</do>
       <do on="meta">head -n 5 target/util/nmfe73</do>
       <do on="meta">which ifort</do>
       <!--The 'install' interface installs NONMEM.-->
       <do on="install">date</do>
       <do on="install">rm -rf origin/temp</do>
       <do on="install">mkdir origin/temp</do>
       <do on="install">cp -r folder/* origin/temp</do>
       <do on="install" in="origin">patch -p0 &lt; nix/setup73.diff</do>
       <!--alters compile options in setup73-->
       <do on="install">rm -rf target</do>
       <do on="install">mkdir target</do>
       <do on="install" in="origin/temp">pwd</do>
       <do on="install" in="origin/temp">ifort --version</do>
       <do on="install" in="origin/temp">/bin/bash SETUP73 origin/temp target ifort y ar same rec q unzip nonmem73e.zip nonmem73r.zip</do>
       <do on="install">mkdir target/nmqual</do>
       <do on="install">mkdir target/nmqual/doc</do>
       <do on="install">cp $0 target/nmqual</do>
       <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
       <do on="install">cp -r origin/con target/nmqual</do>
       <!--support for processing xml docs-->
       <do on="install">cp -r origin/csv target/nmqual</do>
       <!--support for processing csv docs-->
       <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
       <!--reference modeling results-->
       <do on="install">cp -r origin/psn target/nmqual</do>
       <!--support for psn qualification-->
       <do on="install">cp origin/nix/setup73.diff target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">cp origin/temp/SETUP73 target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">rm -rf origin/temp</do>
       <do on="install">cp -r origin/test target/nmqual</do>
       <!--supports control tests-->
       <do on="install">chmod 0777 target/license/nonmem.lic</do>
       <!--enable overwriting-->
       <do on="install">cp unlock target/license/nonmem.lic</do>
       <!--replace expired license-->
       <do on="install">cp mpicha target/mpi/mpi_lini</do>
       <!--replace default mpich archive-->
       <!--replace util/nmfe73 and run/nmfe73 to accept compile/execute option-->
       <do on="install">cp origin/nix/nmfe73 target/util</do>
       <do on="install">cp origin/nix/nmfe73 target/run</do>
       <do on="install" as="xml">perl $0 $_0 meta</do>
       <to on="install">target/nmqual/log.xml</to>
       <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
       <!--Run directory and run name are required arguments.-->
       <do on="basic" as="xml">perl $0 $_0 meta</do>
       <do on="basic" in="$_1">target/util/nmfe73 $_2.ctl $_2.lst</do>
       <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="basic" as="xml">cat target/nmqual/log.xml</do>
       <to on="basic">$_1/$_2.log.xml</to>
       <!--The 'run' interface expects a leading compile/execute argument.-->
       <do on="run" as="xml">perl $0 $_0 meta</do>
       <do on="run" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst</do>
       <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="run" as="xml">cat target/nmqual/log.xml</do>
       <to on="run">$_2/$_3.log.xml</to>
       <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
       <do on="para" as="xml">perl $0 $_0 meta</do>
       <do on="para" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
       <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="para" as="xml">cat target/nmqual/log.xml</do>
       <to on="para">$_2/$_3.log.xml</to>
       <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
       <do on="test" in="target/nmqual/test">target/util/nmfe73 $_1.ctl $_1.lst</do>
       <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
       <!--The 'qualify' interface runs a full suite of qualification tests.-->
       <do on="qualify" as="xml">perl $0 $_0 meta</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
       <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
       <to on="qualify">$_1</to>
       <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
       <do on="regress" as="xml">perl $0 $_0 meta</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="regress" as="xml">cat target/nmqual/log.xml</do>
       <to on="regress">$_1</to>
       <!--The 'psntest' interface runs PsN control tests.-->
       <do on="psntest" as="xml">perl $0 $_0 meta</do>
       <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
       <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
       <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.nmctl.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.nmctl.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
       <to on="psntest">$_1</to>
       <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
       <do on="accept">echo $_</do>
       <to on="accept">$0</to>
      </config>
      <job>
       <do>pwd</do>
       <so>/data/nmtest</so>
      </job>
      <job>
       <do>date</do>
       <so>Mon Sep 18 13:44:05 UTC 2017</so>
      </job>
      <job>
       <do>perl -e 'use POSIX; print join qq(,),uname'</do>
       <so>Linux,ip-172-16-2-177,3.13.0-93-generic,#140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016,x86_64</so>
      </job>
      <job>
       <do>echo $SHELL</do>
       <so>/bin/bash</so>
      </job>
      <job>
       <do>echo $USER</do>
       <so>kyleb</so>
      </job>
      <job>
       <do>echo $PATH</do>
       <so>/usr/local/mpich3/bin:/usr/local/mpich3gf/bin:/opt/intel/bin/intel64:/opt/intel/mpirt/bin/intel64:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/sge/bin/lx-amd64:/usr/local/texlive/2013/bin/x86_64-linux</so>
      </job>
      <job>
       <do>head -n 5 /opt/NONMEM/nm73/util/nmfe73</do>
       <so>#!/bin/bash
          dir=/opt/NONMEM/nm73
          f=ifort
          o=' -fp-model strict -Gs -nologo -nbs -w '
          opstat=' -static '</so>
      </job>
      <job>
       <do>which ifort</do>
       <so>/opt/intel/bin/intel64/ifort</so>
      </job>
     </logged>
    </log>
   </so>
  </job>
  <job>
   <do in="model/101">/opt/NONMEM/nm73/util/nmfe73 ce 101.ctl 101.lst</do>
   <so>Starting NMTRAN
     
    WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
                
    (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
   Recompiling certain components
   Building NONMEM Executable
   Starting nonmem execution ...
   License Registered to: Metrum Research Group
   Expiration Date:    14 JUL 2018
   Current Date:       18 SEP 2017
   Days until program expires : 301</so>
  </job>
  <job>
   <do in="model/101">if [ -e 101.xml ];then cat 101.xml;else echo \&lt;nofile/\>; fi</do>
   <so>
    <nm:output xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:nm="http://namespaces.oreilly.com/xmlnut/address" xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address output.xsd">
     <nm:start_datetime>2017-09-18T13:44:09.509</nm:start_datetime>
     <nm:control_stream>
     $PROB RUN# 101
     
     $INPUT C ID TIME EVID AMT CMT SS II ADDL RATE LAGT MODE DUR2 RAT2 BIOAV DV
     
     $DATA ../../data/101.csv IGNORE=C
     
     $SUBROUTINES ADVAN2 TRANS2
     
     $PK
     
     TVCL=THETA(1)
     CL=TVCL*EXP(ETA(1))
     
     TVV2=THETA(2)
     V=TVV2*EXP(ETA(2))
     
     TVKA=THETA(3)
     KA=TVKA*EXP(ETA(3))
     
     ALAG2 = LAGT
     F2 = BIOAV
     
     IF(MODE.EQ.1) R2 = RAT2
     IF(MODE.EQ.2) D2 = DUR2
     
     $ERROR
     IPRED=A(2)/(V/1000)
     Y=IPRED*EXP(ERR(1))
     
     CP = IPRED
     
     $THETA
     (1,   FIX) ;; CL
     (30,  FIX) ;; V
     (1.5, FIX) ;; KA
     
     $OMEGA
     0.0 FIX
     0.0 FIX
     0.0 FIX
     
     $SIGMA
     0.00 FIX
     
     $TABLE FILE=TAB TIME EVID CP IPRED PRED DV NOPRINT ONEHEADER NOAPPEND
     
     $SIMULATION (2674474) ONLYSIMULATION
     </nm:control_stream>
     <nm:nmtran>
     
      WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
     
      (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.</nm:nmtran>
     <nm:nonmem nm:version="7.3.0">
      <nm:license_information>
      License Registered to: Metrum Research Group
      Expiration Date:    14 JUL 2018
      Current Date:       18 SEP 2017
      Days until program expires : 301</nm:license_information>
      <nm:program_information>
      1NONLINEAR MIXED EFFECTS MODEL PROGRAM (NONMEM) VERSION 7.3.0
       ORIGINALLY DEVELOPED BY STUART BEAL, LEWIS SHEINER, AND ALISON BOECKMANN
       CURRENT DEVELOPERS ARE ROBERT BAUER, ICON DEVELOPMENT SOLUTIONS,
       AND ALISON BOECKMANN. IMPLEMENTATION, EFFICIENCY, AND STANDARDIZATION
       PERFORMED BY NOUS INFOSYSTEMS.</nm:program_information>
      <nm:problem nm:number="1" nm:subproblem="0" nm:superproblem1="0" nm:iteration1="0" nm:superproblem2="0" nm:iteration2="0">
       <nm:problem_title>RUN# 101</nm:problem_title>
       <nm:problem_information>
       
        PROBLEM NO.:         1
        RUN# 101
       0DATA CHECKOUT RUN:              NO
        DATA SET LOCATED ON UNIT NO.:    2
        THIS UNIT TO BE REWOUND:        NO
        NO. OF DATA RECS IN DATA SET:     1111
        NO. OF DATA ITEMS IN DATA SET:  17
        ID DATA ITEM IS DATA ITEM NO.:   2
        DEP VARIABLE IS DATA ITEM NO.:  16
        MDV DATA ITEM IS DATA ITEM NO.: 17
       0INDICES PASSED TO SUBROUTINE PRED:
          4   3   5  10   7   8   6   0   0   0   9
       0LABELS FOR DATA ITEMS:
        C ID TIME EVID AMT CMT SS II ADDL RATE LAGT MODE DUR2 RAT2 BIOAV DV MDV
       0(NONBLANK) LABELS FOR PRED-DEFINED ITEMS:
        IPRED CP
       0FORMAT FOR DATA:
        (E2.0,E4.0,E3.0,E2.0,E4.0,2E2.0,E3.0,E2.0,E7.0,3E2.0,E3.0,2E6.0,1F2.0)
       
        TOT. NO. OF OBS RECS:     1095
        TOT. NO. OF INDIVIDUALS:     15
       0LENGTH OF THETA:   3
       0DEFAULT THETA BOUNDARY TEST OMITTED:    NO
       0OMEGA HAS SIMPLE DIAGONAL FORM WITH DIMENSION:   3
       0DEFAULT OMEGA BOUNDARY TEST OMITTED:    NO
       0SIGMA HAS SIMPLE DIAGONAL FORM WITH DIMENSION:   1
       0DEFAULT SIGMA BOUNDARY TEST OMITTED:    NO
       0INITIAL ESTIMATE OF THETA:
        LOWER BOUND    INITIAL EST    UPPER BOUND
         0.1000E+01     0.1000E+01     0.1000E+01
         0.3000E+02     0.3000E+02     0.3000E+02
         0.1500E+01     0.1500E+01     0.1500E+01
       0INITIAL ESTIMATE OF OMEGA:
        0.0000E+00
        0.0000E+00   0.0000E+00
        0.0000E+00   0.0000E+00   0.0000E+00
       0OMEGA CONSTRAINED TO BE THIS INITIAL ESTIMATE
       0INITIAL ESTIMATE OF SIGMA:
        0.0000E+00
       0SIGMA CONSTRAINED TO BE THIS INITIAL ESTIMATE
       0SIMULATION STEP OMITTED:    NO
        OBJ FUNC EVALUATED:         NO
       0SIMULATION RANDOM METHOD SELECTED (RANMETHOD): DEFAULT
        SOURCE   1:
          SEED1:       2674474   SEED2:             0   PSEUDO-NORMAL
       0WARNING: NO. OF OBS RECS IN INDIVIDUAL REC NO.      1 (IN INDIVIDUAL
        REC ORDERING) EXCEEDS ONE WHILE INITIAL ESTIMATE OF WITHIN INDIVIDUAL VARIANCE IS ZERO
       0WARNING: NO. OF OBS RECS IN INDIVIDUAL REC NO.      2 (IN INDIVIDUAL
        REC ORDERING) EXCEEDS ONE WHILE INITIAL ESTIMATE OF WITHIN INDIVIDUAL VARIANCE IS ZERO
       0WARNING: NO. OF OBS RECS IN INDIVIDUAL REC NO.      3 (IN INDIVIDUAL
        REC ORDERING) EXCEEDS ONE WHILE INITIAL ESTIMATE OF WITHIN INDIVIDUAL VARIANCE IS ZERO
       0WARNING: NO. OF OBS RECS IN INDIVIDUAL REC NO.      4 (IN INDIVIDUAL
        REC ORDERING) EXCEEDS ONE WHILE INITIAL ESTIMATE OF WITHIN INDIVIDUAL VARIANCE IS ZERO
       0WARNING: NO. OF OBS RECS IN INDIVIDUAL REC NO.      5 (IN INDIVIDUAL
        REC ORDERING) EXCEEDS ONE WHILE INITIAL ESTIMATE OF WITHIN INDIVIDUAL VARIANCE IS ZERO
       0TABLES STEP OMITTED:    NO
        NO. OF TABLES:           1
        SEED NUMBER (SEED):    11456
        RANMETHOD:
        MC SAMPLES (ESEED):    300
        WRES SQUARE ROOT TYPE:            EIGENVALUE
       0-- TABLE   1 --
       04 COLUMNS APPENDED:     NO
        PRINTED:                NO
        HEADERS:               ONE
        FILE TO BE FORWARDED:   NO
        FORMAT:                S1PE11.4
        LFORMAT:
        RFORMAT:
       0USER-CHOSEN ITEMS:
        TIME EVID CP IPRED PRED DV
       1DOUBLE PRECISION PREDPP VERSION 7.3.0
       
        ONE COMPARTMENT MODEL WITH FIRST-ORDER ABSORPTION (ADVAN2)
       0MAXIMUM NO. OF BASIC PK PARAMETERS:   3
       0BASIC PK PARAMETERS (AFTER TRANSLATION):
          ELIMINATION RATE (K) IS BASIC PK PARAMETER NO.:  1
          ABSORPTION RATE (KA) IS BASIC PK PARAMETER NO.:  3
       
        TRANSLATOR WILL CONVERT PARAMETERS
        CLEARANCE (CL) AND VOLUME (V) TO K (TRANS2)
       0COMPARTMENT ATTRIBUTES
        COMPT. NO.   FUNCTION   INITIAL    ON/OFF      DOSE      DEFAULT    DEFAULT
                                STATUS     ALLOWED    ALLOWED    FOR DOSE   FOR OBS.
           1         DEPOT        OFF        YES        YES        YES        NO
           2         CENTRAL      ON         NO         YES        NO         YES
           3         OUTPUT       OFF        YES        NO         NO         NO
       1
        ADDITIONAL PK PARAMETERS - ASSIGNMENT OF ROWS IN GG
        COMPT. NO.                             INDICES
                     SCALE      BIOAVAIL.   ZERO-ORDER  ZERO-ORDER  ABSORB
                                FRACTION    RATE        DURATION    LAG
           1            *           *           *           *           *
           2            *           5           6           7           4
           3            *           -           -           -           -
                    - PARAMETER IS NOT ALLOWED FOR THIS MODEL
                    * PARAMETER IS NOT SUPPLIED BY PK SUBROUTINE;
                      WILL DEFAULT TO ONE IF APPLICABLE
       0DATA ITEM INDICES USED BY PRED ARE:
          EVENT ID DATA ITEM IS DATA ITEM NO.:      4
          TIME DATA ITEM IS DATA ITEM NO.:          3
          DOSE AMOUNT DATA ITEM IS DATA ITEM NO.:   5
          DOSE RATE DATA ITEM IS DATA ITEM NO.:    10
          STEADY STATE DATA ITEM IS DATA ITEM NO.:  7
          INTERVAL DATA ITEM IS DATA ITEM NO.:      8
          ADDL. DOSES DATA ITEM IS DATA ITEM NO.:   9
          COMPT. NO. DATA ITEM IS DATA ITEM NO.:    6
       
       0PK SUBROUTINE CALLED WITH EVERY EVENT RECORD.
        PK SUBROUTINE NOT CALLED AT NONEVENT (ADDITIONAL OR LAGGED) DOSE TIMES.
       0ERROR SUBROUTINE CALLED WITH EVERY EVENT RECORD.
       0ERROR SUBROUTINE INDICATES THAT DERIVATIVES OF COMPARTMENT AMOUNTS ARE USED.</nm:problem_information>
       <nm:simulation_information>
       1
        SIMULATION STEP PERFORMED
        SOURCE  1:
           SEED1:     860382786   SEED2:             0</nm:simulation_information>
       <nm:estimation nm:number="1" nm:type="1">
        <nm:table_series>0</nm:table_series>
       </nm:estimation>
      </nm:problem>
     </nm:nonmem>
     <nm:stop_datetime>2017-09-18T13:44:09.628</nm:stop_datetime>
     <nm:total_cputime>0.099</nm:total_cputime>
    </nm:output>
   </so>
  </job>
  <job>
   <do>cat /opt/NONMEM/nm73/nmqual/log.xml</do>
   <so>
    <log>
     <logged on="install">
      <config>
       <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
       <alias id="folder">/mnt/nm730CD</alias>
       <alias id="target">/opt/NONMEM/nm73</alias>
       <alias id="origin">/mnt/nmqual-8.3.3</alias>
       <alias id="unlock">/mnt/nonmem.lic</alias>
       <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
       <!--The meta interface groups commands that collect metadata.-->
       <do on="meta">pwd</do>
       <do on="meta">date</do>
       <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
       <do on="meta">echo $SHELL</do>
       <do on="meta">echo $USER</do>
       <do on="meta">echo $PATH</do>
       <do on="meta">head -n 5 target/util/nmfe73</do>
       <do on="meta">which ifort</do>
       <!--The 'install' interface installs NONMEM.-->
       <do on="install">date</do>
       <do on="install">rm -rf origin/temp</do>
       <do on="install">mkdir origin/temp</do>
       <do on="install">cp -r folder/* origin/temp</do>
       <do on="install" in="origin">patch -p0 &lt; nix/setup73.diff</do>
       <!--alters compile options in setup73-->
       <do on="install">rm -rf target</do>
       <do on="install">mkdir target</do>
       <do on="install" in="origin/temp">pwd</do>
       <do on="install" in="origin/temp">ifort --version</do>
       <do on="install" in="origin/temp">/bin/bash SETUP73 origin/temp target ifort y ar same rec q unzip nonmem73e.zip nonmem73r.zip</do>
       <do on="install">mkdir target/nmqual</do>
       <do on="install">mkdir target/nmqual/doc</do>
       <do on="install">cp $0 target/nmqual</do>
       <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
       <do on="install">cp -r origin/con target/nmqual</do>
       <!--support for processing xml docs-->
       <do on="install">cp -r origin/csv target/nmqual</do>
       <!--support for processing csv docs-->
       <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
       <!--reference modeling results-->
       <do on="install">cp -r origin/psn target/nmqual</do>
       <!--support for psn qualification-->
       <do on="install">cp origin/nix/setup73.diff target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">cp origin/temp/SETUP73 target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">rm -rf origin/temp</do>
       <do on="install">cp -r origin/test target/nmqual</do>
       <!--supports control tests-->
       <do on="install">chmod 0777 target/license/nonmem.lic</do>
       <!--enable overwriting-->
       <do on="install">cp unlock target/license/nonmem.lic</do>
       <!--replace expired license-->
       <do on="install">cp mpicha target/mpi/mpi_lini</do>
       <!--replace default mpich archive-->
       <!--replace util/nmfe73 and run/nmfe73 to accept compile/execute option-->
       <do on="install">cp origin/nix/nmfe73 target/util</do>
       <do on="install">cp origin/nix/nmfe73 target/run</do>
       <do on="install" as="xml">perl $0 $_0 meta</do>
       <to on="install">target/nmqual/log.xml</to>
       <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
       <!--Run directory and run name are required arguments.-->
       <do on="basic" as="xml">perl $0 $_0 meta</do>
       <do on="basic" in="$_1">target/util/nmfe73 $_2.ctl $_2.lst</do>
       <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="basic" as="xml">cat target/nmqual/log.xml</do>
       <to on="basic">$_1/$_2.log.xml</to>
       <!--The 'run' interface expects a leading compile/execute argument.-->
       <do on="run" as="xml">perl $0 $_0 meta</do>
       <do on="run" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst</do>
       <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="run" as="xml">cat target/nmqual/log.xml</do>
       <to on="run">$_2/$_3.log.xml</to>
       <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
       <do on="para" as="xml">perl $0 $_0 meta</do>
       <do on="para" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
       <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="para" as="xml">cat target/nmqual/log.xml</do>
       <to on="para">$_2/$_3.log.xml</to>
       <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
       <do on="test" in="target/nmqual/test">target/util/nmfe73 $_1.ctl $_1.lst</do>
       <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
       <!--The 'qualify' interface runs a full suite of qualification tests.-->
       <do on="qualify" as="xml">perl $0 $_0 meta</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
       <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
       <to on="qualify">$_1</to>
       <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
       <do on="regress" as="xml">perl $0 $_0 meta</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="regress" as="xml">cat target/nmqual/log.xml</do>
       <to on="regress">$_1</to>
       <!--The 'psntest' interface runs PsN control tests.-->
       <do on="psntest" as="xml">perl $0 $_0 meta</do>
       <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
       <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
       <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.nmctl.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.nmctl.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
       <to on="psntest">$_1</to>
       <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
       <do on="accept">echo $_</do>
       <to on="accept">$0</to>
      </config>
      <job>
       <do>date</do>
       <so>Thu Dec 22 19:49:52 UTC 2016</so>
      </job>
      <job>
       <do>rm -rf /mnt/nmqual-8.3.3/temp</do>
       <so/>
      </job>
      <job>
       <do>mkdir /mnt/nmqual-8.3.3/temp</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nm730CD/* /mnt/nmqual-8.3.3/temp</do>
       <so/>
      </job>
      <job>
       <do in="/mnt/nmqual-8.3.3">patch -p0 &lt; nix/setup73.diff</do>
       <so>patching file temp/SETUP73
          Hunk #1 succeeded at 380 (offset 14 lines).</so>
      </job>
      <job>
       <do>rm -rf /opt/NONMEM/nm73</do>
       <so/>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm73</do>
       <so/>
      </job>
      <job>
       <do in="/mnt/nmqual-8.3.3/temp">pwd</do>
       <so>/mnt/nmqual-8.3.3/temp</so>
      </job>
      <job>
       <do in="/mnt/nmqual-8.3.3/temp">ifort --version</do>
       <so>ifort (IFORT) 12.0.4 20110427
          Copyright (C) 1985-2011 Intel Corporation.  All rights reserved.
          </so>
      </job>
      <job>
       <do in="/mnt/nmqual-8.3.3/temp">/bin/bash SETUP73 /mnt/nmqual-8.3.3/temp /opt/NONMEM/nm73 ifort y ar same rec q unzip nonmem73e.zip nonmem73r.zip</do>
       <so>NONMEM 7.3.0 INSTALLATION UTILITY - UNIX Bourne-Again SHell version
          For instructions, see readme_7.3.0.pdf or readme_7.3.0.txt on the CD
           
          SETUP73 /mnt/nmqual-8.3.3/temp /opt/NONMEM/nm73 ifort y ar same rec q unzip nonmem73e.zip nonmem73r.zip
          CD-ROM drive is /mnt/nmqual-8.3.3/temp
          NONMEM 7.3 directory is /opt/NONMEM/nm73
          Command for FORTRAN compiles is ifort
          Optimization for Fortran compiles is y
          Command to build NONMEM archive is ar
          Sizes is same (SIZES.f90 is always used)
          Recompile is rec
           All binaries will be recompiled
          Interactive is q
          Unzip program is unzip
          Encrypted source file is nonmem73e.zip
          Unencrypted file is nonmem73r.zip
           
          To learn how to override the defaults, enter
          % SETUP73 help
           
          directory /opt/NONMEM/nm73
          Step 1a. Copy files from /mnt/nmqual-8.3.3/temp to /opt/NONMEM/nm73
          Step 1b. Copy files from /mnt/nmqual-8.3.3/temp/NONMEM_7.3.0 to /opt/NONMEM/nm73
           
          Installing NONMEM 7.3.0 (Enter Ctrl-C to interrupt) ...
          Step 2a. Make sub-directories of /opt/NONMEM/nm73
          Extract rest of files
          Choosing platform-dependent files ...
          os is Linux
          cpu is x86_64
            Will use install_Linux
          Compiler is ifort
            Will use util/finish_Linux_ifort
           
          === Checking compiler
          Version of ifort is:
           
          ===
          Copying NONMEM license file nonmem.lic to
          /opt/NONMEM/nm73/license/nonmem.lic
          Warning: the license may be expired or may expire soon.
          When this happens, NONMEM runs will fail.
          If you have a new license file from IDS, you may stop, replace
          it and restart SETUP73. Otherwise, allow NONMEM installation
          to finish at this time.
          Obtain a new license file from IDS (IDSSOFTWARE@iconplc.com)
          as as soon as possible and replace
          /opt/NONMEM/nm73/license/nonmem.lic
           
          Changes to License file, resource/SIZES.f90 and other resource
          files may be made here.
          Step 6. Compile resource files
          Compile of resource files was successful.
          resource directory has been compiled
          Step 9. Compile all remaining source files
          This will take a long time.
          See file /opt/NONMEM/nm73/progress.txt for compiler progress
          Step 10. Build NONMEM archive nm/nonmem.a
          Step 13. Create shell script util/nmfe73
          finished nmfe73
          Step 14. Create directory run
          run contains the following files:
          nmfe73 CONTROL3 CONTROL5 DATA3 THEOPP REPORT5IDS.txt
          run contains additional files
           
          Installation of NONMEM 7.3.0 is finished.
          For future reference, the command has been saved in file SETUP.TXT
           
          Please review /opt/NONMEM/nm73/compilemsgs.txt
                        /opt/NONMEM/nm73/finishmsgs.txt
          Ignore warnings. Report error messages.
           
          Help and html files and Users Guides will be installed.
          Step 15. Install NONMEM Users Guide files in /opt/NONMEM/nm73/guides
          Unzipping guides.zip ...
          To use the NONMEM Users Guides,
            open pdf files in /opt/NONMEM/nm73/guides using Adobe Reader.
          Step 16. Install On-line help files in /opt/NONMEM/nm73/help
          Unzipping help.zip ...
          For online help, enter (e.g.)
            cd /opt/NONMEM/nm73/help
            ./nmhelp advan2
          Step 17. Install HTML files in /opt/NONMEM/nm73/html (this may take a while) ...
          Unzipping html.zip ...
          For online help HTML files,
            open /opt/NONMEM/nm73/index.html in web browser
           
          Do you want to test the installation?
          Testing the installation. Commands are
              cd /opt/NONMEM/nm73/run
              ./nmfe73 CONTROL5 REPORT5.txt -prdefault
          If the run is successful, file REPORT5.txt will be created.
           
          Starting NMTRAN
            
           WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
                       
           (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
                       
           (WARNING  43) THE $PK BLOCK REQUESTS "CALL ONCE PER INDIVIDUAL RECORD", BUT
           DATA ITEMS ARE USED IN THE $PK BLOCK. VALUES OF THESE DATA ITEMS
           SUBSEQUENT TO THOSE FROM THE FIRST EVENT RECORD WILL BE IGNORED.  IF THIS
           IS NOT APPROPRIATE, THE CALL DATA ITEM CAN BE USED TO OBTAIN ADDITIONAL
           CALLS, OR $PK'S CALLING PROTOCOL SHOULD BE CHANGED.
          Building NONMEM Executable
          Starting nonmem execution ...
          License Registered to: Temporary license for NONMEM7.3.0 installation
          Expiration Date:    22 DEC 2013
          Current Date:       22 DEC 2016
           
            **** NONMEM LICENSE HAS EXPIRED ****
            ****     NONMEM TERMINATING     ****
            **** CONTACT idssoftware@iconplc.com FOR RENEWAL ****
           
          Nonmem executable was created but did not run successfully.
          This may be because the license is expired.
          Obtain a new license file from IDS (IDSSOFTWARE@iconplc.com)
          and replace
          /opt/NONMEM/nm73/license/nonmem.lic</so>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm73/nmqual</do>
       <so/>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm73/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp autolog.pl /opt/NONMEM/nm73/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.3.3/con /opt/NONMEM/nm73/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.3.3/csv /opt/NONMEM/nm73/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.3.3/doc/nix/* /opt/NONMEM/nm73/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.3.3/psn /opt/NONMEM/nm73/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.3.3/nix/setup73.diff /opt/NONMEM/nm73/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.3.3/temp/SETUP73 /opt/NONMEM/nm73/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>rm -rf /mnt/nmqual-8.3.3/temp</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.3.3/test /opt/NONMEM/nm73/nmqual</do>
       <so/>
      </job>
      <job>
       <do>chmod 0777 /opt/NONMEM/nm73/license/nonmem.lic</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nonmem.lic /opt/NONMEM/nm73/license/nonmem.lic</do>
       <so/>
      </job>
      <job>
       <do>cp /usr/local/mpich3/lib/libmpich.a /opt/NONMEM/nm73/mpi/mpi_lini</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.3.3/nix/nmfe73 /opt/NONMEM/nm73/util</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.3.3/nix/nmfe73 /opt/NONMEM/nm73/run</do>
       <so/>
      </job>
      <job>
       <do>perl autolog.pl nix/nm73.xml meta</do>
       <so>
        <log>
         <logged on="meta">
          <config>
           <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
           <alias id="folder">/mnt/nm730CD</alias>
           <alias id="target">/opt/NONMEM/nm73</alias>
           <alias id="origin">/mnt/nmqual-8.3.3</alias>
           <alias id="unlock">/mnt/nonmem.lic</alias>
           <alias id="mpicha">/usr/local/mpich3/lib/libmpich.a</alias>
           <!--The meta interface groups commands that collect metadata.-->
           <do on="meta">pwd</do>
           <do on="meta">date</do>
           <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
           <do on="meta">echo $SHELL</do>
           <do on="meta">echo $USER</do>
           <do on="meta">echo $PATH</do>
           <do on="meta">head -n 5 target/util/nmfe73</do>
           <do on="meta">which ifort</do>
           <!--The 'install' interface installs NONMEM.-->
           <do on="install">date</do>
           <do on="install">rm -rf origin/temp</do>
           <do on="install">mkdir origin/temp</do>
           <do on="install">cp -r folder/* origin/temp</do>
           <do on="install" in="origin">patch -p0 &lt; nix/setup73.diff</do>
           <!--alters compile options in setup73-->
           <do on="install">rm -rf target</do>
           <do on="install">mkdir target</do>
           <do on="install" in="origin/temp">pwd</do>
           <do on="install" in="origin/temp">ifort --version</do>
           <do on="install" in="origin/temp">/bin/bash SETUP73 origin/temp target ifort y ar same rec q unzip nonmem73e.zip nonmem73r.zip</do>
           <do on="install">mkdir target/nmqual</do>
           <do on="install">mkdir target/nmqual/doc</do>
           <do on="install">cp $0 target/nmqual</do>
           <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
           <do on="install">cp -r origin/con target/nmqual</do>
           <!--support for processing xml docs-->
           <do on="install">cp -r origin/csv target/nmqual</do>
           <!--support for processing csv docs-->
           <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
           <!--reference modeling results-->
           <do on="install">cp -r origin/psn target/nmqual</do>
           <!--support for psn qualification-->
           <do on="install">cp origin/nix/setup73.diff target/nmqual/doc</do>
           <!--keep for archival purposes-->
           <do on="install">cp origin/temp/SETUP73 target/nmqual/doc</do>
           <!--keep for archival purposes-->
           <do on="install">rm -rf origin/temp</do>
           <do on="install">cp -r origin/test target/nmqual</do>
           <!--supports control tests-->
           <do on="install">chmod 0777 target/license/nonmem.lic</do>
           <!--enable overwriting-->
           <do on="install">cp unlock target/license/nonmem.lic</do>
           <!--replace expired license-->
           <do on="install">cp mpicha target/mpi/mpi_lini</do>
           <!--replace default mpich archive-->
           <!--replace util/nmfe73 and run/nmfe73 to accept compile/execute option-->
           <do on="install">cp origin/nix/nmfe73 target/util</do>
           <do on="install">cp origin/nix/nmfe73 target/run</do>
           <do on="install" as="xml">perl $0 $_0 meta</do>
           <to on="install">target/nmqual/log.xml</to>
           <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
           <!--Run directory and run name are required arguments.-->
           <do on="basic" as="xml">perl $0 $_0 meta</do>
           <do on="basic" in="$_1">target/util/nmfe73 $_2.ctl $_2.lst</do>
           <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="basic" as="xml">cat target/nmqual/log.xml</do>
           <to on="basic">$_1/$_2.log.xml</to>
           <!--The 'run' interface expects a leading compile/execute argument.-->
           <do on="run" as="xml">perl $0 $_0 meta</do>
           <do on="run" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst</do>
           <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="run" as="xml">cat target/nmqual/log.xml</do>
           <to on="run">$_2/$_3.log.xml</to>
           <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
           <do on="para" as="xml">perl $0 $_0 meta</do>
           <do on="para" in="$_2">target/util/nmfe73 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
           <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="para" as="xml">cat target/nmqual/log.xml</do>
           <to on="para">$_2/$_3.log.xml</to>
           <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
           <do on="test" in="target/nmqual/test">target/util/nmfe73 $_1.ctl $_1.lst</do>
           <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
           <!--The 'qualify' interface runs a full suite of qualification tests.-->
           <do on="qualify" as="xml">perl $0 $_0 meta</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
           <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
           <to on="qualify">$_1</to>
           <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
           <do on="regress" as="xml">perl $0 $_0 meta</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
           <do on="regress" as="xml">cat target/nmqual/log.xml</do>
           <to on="regress">$_1</to>
           <!--The 'psntest' interface runs PsN control tests.-->
           <do on="psntest" as="xml">perl $0 $_0 meta</do>
           <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
           <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
           <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.nmctl.csv</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.nmctl.csv</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
           <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
           <to on="psntest">$_1</to>
           <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
           <do on="accept">echo $_</do>
           <to on="accept">$0</to>
          </config>
          <job>
           <do>pwd</do>
           <so>/mnt/nmqual-8.3.3</so>
          </job>
          <job>
           <do>date</do>
           <so>Thu Dec 22 19:54:48 UTC 2016</so>
          </job>
          <job>
           <do>perl -e 'use POSIX; print join qq(,),uname'</do>
           <so>Linux,ip-10-0-0-120,3.13.0-93-generic,#140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016,x86_64</so>
          </job>
          <job>
           <do>echo $SHELL</do>
           <so>/bin/bash</so>
          </job>
          <job>
           <do>echo $USER</do>
           <so>root</so>
          </job>
          <job>
           <do>echo $PATH</do>
           <so>/opt/intel/bin/intel64:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/chef/embedded/bin:/opt/chef/embedded/bin:/opt/intel/mpirt/bin/intel64</so>
          </job>
          <job>
           <do>head -n 5 /opt/NONMEM/nm73/util/nmfe73</do>
           <so>#!/bin/bash
                     dir=/opt/NONMEM/nm73
                     f=ifort
                     o=' -fp-model strict -Gs -nologo -nbs -w '
                     opstat=' -static '</so>
          </job>
          <job>
           <do>which ifort</do>
           <so>/opt/intel/bin/intel64/ifort</so>
          </job>
         </logged>
        </log>
       </so>
      </job>
     </logged>
    </log>
   </so>
  </job>
 </logged>
</log>
