<log>
 <logged>
  <config>
   <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
   <alias id="folder">/mnt/nm744CD</alias>
   <alias id="target">/opt/NONMEM/nm74gf</alias>
   <alias id="origin">/mnt/nmqual-8.4.0</alias>
   <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
   <alias id="mpicha">/usr/lib/x86_64-linux-gnu/libmpich.a</alias>
   <!--The meta interface groups commands that collect metadata.-->
   <do on="meta">pwd</do>
   <do on="meta">date</do>
   <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
   <do on="meta">echo $SHELL</do>
   <do on="meta">echo $USER</do>
   <do on="meta">echo $PATH</do>
   <do on="meta">head -n 5 target/util/nmfe74</do>
   <do on="meta">which gfortran</do>
   <!--The 'install' interface installs NONMEM.-->
   <do on="install">date</do>
   <do on="install">rm -rf origin/temp</do>
   <do on="install">mkdir origin/temp</do>
   <do on="install">cp -r folder/* origin/temp</do>
   <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
   <!--alters compile options in setup73-->
   <do on="install">rm -rf target</do>
   <do on="install">mkdir target</do>
   <do on="install" in="origin/temp">pwd</do>
   <do on="install" in="origin/temp">gfortran --version</do>
   <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target gfortran y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
   <do on="install">mkdir target/nmqual</do>
   <do on="install">mkdir target/nmqual/doc</do>
   <do on="install">cp $0 target/nmqual</do>
   <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
   <do on="install">cp -r origin/con target/nmqual</do>
   <!--support for processing xml docs-->
   <do on="install">cp -r origin/csv target/nmqual</do>
   <!--support for processing csv docs-->
   <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
   <!--reference modeling results-->
   <do on="install">cp -r origin/psn target/nmqual</do>
   <!--support for psn qualification-->
   <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
   <!--keep for archival purposes-->
   <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
   <!--keep for archival purposes-->
   <do on="install">rm -rf origin/temp</do>
   <do on="install">cp -r origin/test target/nmqual</do>
   <!--supports control tests-->
   <do on="install">chmod 0777 target/license/nonmem.lic</do>
   <!--enable overwriting-->
   <do on="install">cp unlock target/license/nonmem.lic</do>
   <!--replace expired license-->
   <do on="install">cp mpicha target/mpi/mpi_ling</do>
   <!--replace default mpich archive-->
   <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
   <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
   <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
   <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74gf.diff</do>
   <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74gf.diff</do>
   <do on="install" as="xml">perl $0 $_0 meta</do>
   <to on="install">target/nmqual/log.xml</to>
   <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
   <!--Run directory and run name are required arguments.-->
   <do on="basic" as="xml">perl $0 $_0 meta</do>
   <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
   <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="basic" as="xml">cat target/nmqual/log.xml</do>
   <to on="basic">$_1/$_2.log.xml</to>
   <!--The 'run' interface expects a leading compile/execute argument.-->
   <do on="run" as="xml">perl $0 $_0 meta</do>
   <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
   <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="run" as="xml">cat target/nmqual/log.xml</do>
   <to on="run">$_2/$_3.log.xml</to>
   <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
   <do on="para" as="xml">perl $0 $_0 meta</do>
   <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
   <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
   <do on="para" as="xml">cat target/nmqual/log.xml</do>
   <to on="para">$_2/$_3.log.xml</to>
   <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
   <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
   <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
   <!--The 'qualify' interface runs a full suite of qualification tests.-->
   <do on="qualify" as="xml">perl $0 $_0 meta</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
   <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
   <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
   <to on="qualify">$_1</to>
   <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
   <do on="regress" as="xml">perl $0 $_0 meta</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
   <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
   <do on="regress" as="xml">cat target/nmqual/log.xml</do>
   <to on="regress">$_1</to>
   <!--The 'psntest' interface runs PsN control tests.-->
   <do on="psntest" as="xml">perl $0 $_0 meta</do>
   <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
   <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
   <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
   <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
   <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
   <to on="psntest">$_1</to>
   <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
   <do on="accept">echo $_</do>
   <to on="accept">$0</to>
  </config>
  <job>
   <do>perl /opt/NONMEM/nm74gf/nmqual/autolog.pl /opt/NONMEM/nm74gf/nmqual/log.xml meta</do>
   <so>
    <log>
     <logged>
      <config>
       <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
       <alias id="folder">/mnt/nm744CD</alias>
       <alias id="target">/opt/NONMEM/nm74gf</alias>
       <alias id="origin">/mnt/nmqual-8.4.0</alias>
       <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
       <alias id="mpicha">/usr/lib/x86_64-linux-gnu/libmpich.a</alias>
       <!--The meta interface groups commands that collect metadata.-->
       <do on="meta">pwd</do>
       <do on="meta">date</do>
       <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
       <do on="meta">echo $SHELL</do>
       <do on="meta">echo $USER</do>
       <do on="meta">echo $PATH</do>
       <do on="meta">head -n 5 target/util/nmfe74</do>
       <do on="meta">which gfortran</do>
       <!--The 'install' interface installs NONMEM.-->
       <do on="install">date</do>
       <do on="install">rm -rf origin/temp</do>
       <do on="install">mkdir origin/temp</do>
       <do on="install">cp -r folder/* origin/temp</do>
       <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
       <!--alters compile options in setup73-->
       <do on="install">rm -rf target</do>
       <do on="install">mkdir target</do>
       <do on="install" in="origin/temp">pwd</do>
       <do on="install" in="origin/temp">gfortran --version</do>
       <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target gfortran y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
       <do on="install">mkdir target/nmqual</do>
       <do on="install">mkdir target/nmqual/doc</do>
       <do on="install">cp $0 target/nmqual</do>
       <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
       <do on="install">cp -r origin/con target/nmqual</do>
       <!--support for processing xml docs-->
       <do on="install">cp -r origin/csv target/nmqual</do>
       <!--support for processing csv docs-->
       <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
       <!--reference modeling results-->
       <do on="install">cp -r origin/psn target/nmqual</do>
       <!--support for psn qualification-->
       <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">rm -rf origin/temp</do>
       <do on="install">cp -r origin/test target/nmqual</do>
       <!--supports control tests-->
       <do on="install">chmod 0777 target/license/nonmem.lic</do>
       <!--enable overwriting-->
       <do on="install">cp unlock target/license/nonmem.lic</do>
       <!--replace expired license-->
       <do on="install">cp mpicha target/mpi/mpi_ling</do>
       <!--replace default mpich archive-->
       <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
       <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
       <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
       <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74gf.diff</do>
       <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74gf.diff</do>
       <do on="install" as="xml">perl $0 $_0 meta</do>
       <to on="install">target/nmqual/log.xml</to>
       <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
       <!--Run directory and run name are required arguments.-->
       <do on="basic" as="xml">perl $0 $_0 meta</do>
       <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
       <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="basic" as="xml">cat target/nmqual/log.xml</do>
       <to on="basic">$_1/$_2.log.xml</to>
       <!--The 'run' interface expects a leading compile/execute argument.-->
       <do on="run" as="xml">perl $0 $_0 meta</do>
       <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
       <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="run" as="xml">cat target/nmqual/log.xml</do>
       <to on="run">$_2/$_3.log.xml</to>
       <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
       <do on="para" as="xml">perl $0 $_0 meta</do>
       <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
       <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="para" as="xml">cat target/nmqual/log.xml</do>
       <to on="para">$_2/$_3.log.xml</to>
       <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
       <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
       <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
       <!--The 'qualify' interface runs a full suite of qualification tests.-->
       <do on="qualify" as="xml">perl $0 $_0 meta</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
       <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
       <to on="qualify">$_1</to>
       <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
       <do on="regress" as="xml">perl $0 $_0 meta</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="regress" as="xml">cat target/nmqual/log.xml</do>
       <to on="regress">$_1</to>
       <!--The 'psntest' interface runs PsN control tests.-->
       <do on="psntest" as="xml">perl $0 $_0 meta</do>
       <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
       <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
       <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
       <to on="psntest">$_1</to>
       <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
       <do on="accept">echo $_</do>
       <to on="accept">$0</to>
      </config>
      <job>
       <do>pwd</do>
       <so>/data/home/kyleb/nmtests</so>
      </job>
      <job>
       <do>date</do>
       <so>Mon Nov 23 14:15:11 EST 2020</so>
      </job>
      <job>
       <do>perl -e 'use POSIX; print join qq(,),uname'</do>
       <so>Linux,ip-10-128-18-223,4.15.0-1057-aws,#59-Ubuntu SMP Wed Dec 4 10:02:00 UTC 2019,x86_64</so>
      </job>
      <job>
       <do>echo $SHELL</do>
       <so/>
      </job>
      <job>
       <do>echo $USER</do>
       <so>kyleb</so>
      </job>
      <job>
       <do>echo $PATH</do>
       <so>/data/apps:/usr/local/mpich2/bin:/opt/intel/bin/intel64:/data/home/kyleb/.local/bin:/usr/local/texlive/2019/bin/x86_64-linux:/opt/sge/bin:/opt/sge/bin/lx-amd64:/usr/bin:/opt/amazon/openmpi/bin:/opt/amazon/efa/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</so>
      </job>
      <job>
       <do>head -n 5 /opt/NONMEM/nm74gf/util/nmfe74</do>
       <so>#!/bin/bash
          dir=/opt/NONMEM/nm74gf
          f=gfortran
          o=' -w -O3 -ffast-math -ffpe-summary=none '
          opstat=' -static '</so>
      </job>
      <job>
       <do>which gfortran</do>
       <so>/usr/bin/gfortran</so>
      </job>
     </logged>
    </log>
   </so>
  </job>
  <job>
   <do in="model/3002">/opt/NONMEM/nm74gf/util/nmfe74 ce 3002.ctl 3002.lst</do>
   <so>Starting NMTRAN
     
    WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
                
    (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
   
    (DATA WARNING   5) RECORD         2, DATA ITEM  17, CONTENTS: 1.1
    THE DV DATA ITEM IS POSITIVE, BUT THE MDV DATA ITEM IS 1
   Recompiling certain components
   Building NONMEM Executable
   Starting nonmem execution ...
   License Registered to: Metrum
   Expiration Date:    14 JUL 2021
   Current Date:       23 NOV 2020
   Days until program expires : 236
    Elapsed simulation  time in seconds:     0.00
    Elapsed finaloutput time in seconds:     0.00
   Done with nonmem execution</so>
  </job>
  <job>
   <do in="model/3002">if [ -e 3002.xml ];then cat 3002.xml;else echo \&lt;nofile/\>; fi</do>
   <so>
    <nm:output xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:nm="http://namespaces.oreilly.com/xmlnut/address" xsi:schemaLocation="http://namespaces.oreilly.com/xmlnut/address output.xsd">
     <nm:start_datetime>2020-11-23T14:15:15.389</nm:start_datetime>
     <nm:control_stream>
     $PROB RUN 3001; see nmtest_time_varying-2.R
     
     $INPUT C ID TIME CRCL EVID AMT CMT SS II ADDL RATE LAGT MODE DUR2 RAT2 BIOAV DV
     
     $DATA ../../data/3002.csv IGNORE=C
     
     $SUBROUTINES ADVAN2 TRANS2
     
     $PK
     
     TVCL=THETA(1)*(CRCL/100)
     CL=TVCL*EXP(ETA(1))
     
     TVV2=THETA(2)
     V=TVV2*EXP(ETA(2))
     
     TVKA=THETA(3)
     KA=TVKA*EXP(ETA(3))
     
     $ERROR
     IPRED=A(2)/(V/1000)
     Y=IPRED*EXP(ERR(1))
     
     CP = IPRED
     
     $THETA
     (1.1,   FIX) ;; CL
     (20,  FIX) ;; V
     (1.5, FIX) ;; KA
     
     $OMEGA
     0.0 FIX
     0.0 FIX
     0.0 FIX
     
     $SIGMA
     0.00 FIX
     
     $TABLE FILE=TAB ID TIME CRCL CL CP NOPRINT ONEHEADER NOAPPEND
     
     $SIMULATION (2674474) ONLYSIMULATION
     </nm:control_stream>
     <nm:nmtran>
     
      WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
     
      (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
     
      (DATA WARNING   5) RECORD         2, DATA ITEM  17, CONTENTS: 1.1
      THE DV DATA ITEM IS POSITIVE, BUT THE MDV DATA ITEM IS 1</nm:nmtran>
     <nm:nonmem nm:version="7.4.4">
      <nm:license_information>
      License Registered to: Metrum
      Expiration Date:    14 JUL 2021
      Current Date:       23 NOV 2020
      Days until program expires : 236</nm:license_information>
      <nm:program_information>
      1NONLINEAR MIXED EFFECTS MODEL PROGRAM (NONMEM) VERSION 7.4.4
       ORIGINALLY DEVELOPED BY STUART BEAL, LEWIS SHEINER, AND ALISON BOECKMANN
       CURRENT DEVELOPERS ARE ROBERT BAUER, ICON DEVELOPMENT SOLUTIONS,
       AND ALISON BOECKMANN. IMPLEMENTATION, EFFICIENCY, AND STANDARDIZATION
       PERFORMED BY NOUS INFOSYSTEMS.</nm:program_information>
      <nm:theta_lb>
       <nm:val nm:name="1">1.1000000000000001</nm:val>
       <nm:val nm:name="2">20.000000000000000</nm:val>
       <nm:val nm:name="3">1.5000000000000000</nm:val>
      </nm:theta_lb>
      <nm:theta_in>
       <nm:val nm:name="1">1.1000000000000001</nm:val>
       <nm:val nm:name="2">20.000000000000000</nm:val>
       <nm:val nm:name="3">1.5000000000000000</nm:val>
      </nm:theta_in>
      <nm:theta_ub>
       <nm:val nm:name="1">1.1000000000000001</nm:val>
       <nm:val nm:name="2">20.000000000000000</nm:val>
       <nm:val nm:name="3">1.5000000000000000</nm:val>
      </nm:theta_ub>
      <nm:problem nm:number="1" nm:subproblem="0" nm:superproblem1="0" nm:iteration1="0" nm:superproblem2="0" nm:iteration2="0">
       <nm:problem_title>RUN 3001; see nmtest_time_varying-2.R</nm:problem_title>
       <nm:problem_information>
       
        PROBLEM NO.:         1
        RUN 3001; see nmtest_time_varying-2.R
       0DATA CHECKOUT RUN:              NO
        DATA SET LOCATED ON UNIT NO.:    2
        THIS UNIT TO BE REWOUND:        NO
        NO. OF DATA RECS IN DATA SET:       50
        NO. OF DATA ITEMS IN DATA SET:  18
        ID DATA ITEM IS DATA ITEM NO.:   2
        DEP VARIABLE IS DATA ITEM NO.:  17
        MDV DATA ITEM IS DATA ITEM NO.: 18
       0INDICES PASSED TO SUBROUTINE PRED:
          5   3   6  11   8   9   7   0   0   0  10
       0LABELS FOR DATA ITEMS:
        C ID TIME CRCL EVID AMT CMT SS II ADDL RATE LAGT MODE DUR2 RAT2 BIOAV DV MDV
       0(NONBLANK) LABELS FOR PRED-DEFINED ITEMS:
        CL CP
       0FORMAT FOR DATA:
        (17E4.0,1F2.0)
       
        TOT. NO. OF OBS RECS:       49
        TOT. NO. OF INDIVIDUALS:        1
       0LENGTH OF THETA:   3
       0DEFAULT THETA BOUNDARY TEST OMITTED:    NO
       0OMEGA HAS SIMPLE DIAGONAL FORM WITH DIMENSION:   3
       0DEFAULT OMEGA BOUNDARY TEST OMITTED:    NO
       0SIGMA HAS SIMPLE DIAGONAL FORM WITH DIMENSION:   1
       0DEFAULT SIGMA BOUNDARY TEST OMITTED:    NO
       0INITIAL ESTIMATE OF THETA:
        LOWER BOUND    INITIAL EST    UPPER BOUND
         0.1100E+01     0.1100E+01     0.1100E+01
         0.2000E+02     0.2000E+02     0.2000E+02
         0.1500E+01     0.1500E+01     0.1500E+01
       0INITIAL ESTIMATE OF OMEGA:
        0.0000E+00
        0.0000E+00   0.0000E+00
        0.0000E+00   0.0000E+00   0.0000E+00
       0OMEGA CONSTRAINED TO BE THIS INITIAL ESTIMATE
       0INITIAL ESTIMATE OF SIGMA:
        0.0000E+00
       0SIGMA CONSTRAINED TO BE THIS INITIAL ESTIMATE
       0SIMULATION STEP OMITTED:    NO
        OBJ FUNC EVALUATED:         NO
        ORIGINAL DATA USED ON EACH NEW SIMULATION:         NO
        SEEDS RESET ON EACH NEW SUPERSET ITERATION:        YES
       0SIMULATION RANDOM METHOD SELECTED (RANMETHOD): 4U
       SEED   1 RESET TO INITIAL: YES
        SOURCE   1:
          SEED1:       2674474   SEED2:             0   PSEUDO-NORMAL
       0WARNING: NO. OF OBS RECS IN INDIVIDUAL REC NO.      1 (IN INDIVIDUAL
        REC ORDERING) EXCEEDS ONE WHILE INITIAL ESTIMATE OF WITHIN INDIVIDUAL VARIANCE IS ZERO
       0TABLES STEP OMITTED:    NO
        NO. OF TABLES:           1
        SEED NUMBER (SEED):    11456
        RANMETHOD:             3U
        MC SAMPLES (ESAMPLE):    300
        WRES SQUARE ROOT TYPE (WRESCHOL): EIGENVALUE
       0-- TABLE   1 --
       0RECORDS ONLY:    ALL
       04 COLUMNS APPENDED:    NO
        PRINTED:                NO
        HEADER:                YES
        FILE TO BE FORWARDED:   NO
        FORMAT:                S1PE11.4
        LFORMAT:
        RFORMAT:
        FIXED_EFFECT_ETAS:
       0USER-CHOSEN ITEMS:
        ID TIME CRCL CL CP
       1DOUBLE PRECISION PREDPP VERSION 7.4.4
       
        ONE COMPARTMENT MODEL WITH FIRST-ORDER ABSORPTION (ADVAN2)
       0MAXIMUM NO. OF BASIC PK PARAMETERS:   3
       0BASIC PK PARAMETERS (AFTER TRANSLATION):
          ELIMINATION RATE (K) IS BASIC PK PARAMETER NO.:  1
          ABSORPTION RATE (KA) IS BASIC PK PARAMETER NO.:  3
       
        TRANSLATOR WILL CONVERT PARAMETERS
        CLEARANCE (CL) AND VOLUME (V) TO K (TRANS2)
       0COMPARTMENT ATTRIBUTES
        COMPT. NO.   FUNCTION   INITIAL    ON/OFF      DOSE      DEFAULT    DEFAULT
                                STATUS     ALLOWED    ALLOWED    FOR DOSE   FOR OBS.
           1         DEPOT        OFF        YES        YES        YES        NO
           2         CENTRAL      ON         NO         YES        NO         YES
           3         OUTPUT       OFF        YES        NO         NO         NO
       1
        ADDITIONAL PK PARAMETERS - ASSIGNMENT OF ROWS IN GG
        COMPT. NO.                             INDICES
                     SCALE      BIOAVAIL.   ZERO-ORDER  ZERO-ORDER  ABSORB
                                FRACTION    RATE        DURATION    LAG
           1            *           *           *           *           *
           2            *           *           *           *           *
           3            *           -           -           -           -
                    - PARAMETER IS NOT ALLOWED FOR THIS MODEL
                    * PARAMETER IS NOT SUPPLIED BY PK SUBROUTINE;
                      WILL DEFAULT TO ONE IF APPLICABLE
       0DATA ITEM INDICES USED BY PRED ARE:
          EVENT ID DATA ITEM IS DATA ITEM NO.:      5
          TIME DATA ITEM IS DATA ITEM NO.:          3
          DOSE AMOUNT DATA ITEM IS DATA ITEM NO.:   6
          DOSE RATE DATA ITEM IS DATA ITEM NO.:    11
          STEADY STATE DATA ITEM IS DATA ITEM NO.:  8
          INTERVAL DATA ITEM IS DATA ITEM NO.:      9
          ADDL. DOSES DATA ITEM IS DATA ITEM NO.:  10
          COMPT. NO. DATA ITEM IS DATA ITEM NO.:    7
       
       0PK SUBROUTINE CALLED WITH EVERY EVENT RECORD.
        PK SUBROUTINE NOT CALLED AT NONEVENT (ADDITIONAL OR LAGGED) DOSE TIMES.
       0ERROR SUBROUTINE CALLED WITH EVERY EVENT RECORD.
       0ERROR SUBROUTINE INDICATES THAT DERIVATIVES OF COMPARTMENT AMOUNTS ARE USED.</nm:problem_information>
       <nm:problem_options nm:data_checkout_run="no" nm:data_unit="2" nm:data_rewind="no" nm:data_nrec="50" nm:data_nitems="18" nm:data_id="2" nm:data_l2="0" nm:data_dv="17" nm:data_mdv="18" nm:data_mrg="0" nm:data_raw="0" nm:data_rpt="0" nm:data_sub_array1="0" nm:data_sub_array2="0" nm:data_sub_array3="0" nm:data_pred_indices="5,3,6,11,8,9,7,0,0,0,10" nm:data_format="(17e4.0,1f2.0)" nm:data_nobs="49" nm:data_nind="1" nm:data_mdv100="0" nm:nthetat="3" nm:theta_bound_test_omitted="no" nm:omega_diagdim="3" nm:omega_bound_test_omitted="no" nm:sigma_diagdim="1" nm:sigma_bound_test_omitted="no" nm:sim_omitted="no" nm:sim_obj_evaluated="no" nm:sim_rewind="no" nm:sim_supreset="yes" nm:sim_ranmethod="4u" nm:sim_seed1_01="2674474" nm:sim_seed2_01="0" nm:sim_dist_01="pseudo-normal" nm:sim_newran="0" nm:sim_etader_order_max="0" nm:tab_omitted="no" nm:tab_number="1" nm:tab_seed="11456" nm:tab_ranmethod="3u" nm:tab_esample="300" nm:tab_wres="eigenvalue" nm:tab_fixedetas_01="BLANK" nm:pred_advan="2" nm:pred_evid="5" nm:pred_time="3" nm:pred_amt="6" nm:pred_rate="11" nm:pred_ss="8" nm:pred_ii="9" nm:pred_addl="10" nm:pred_cmt="7"/>
       <nm:simulation_information>
       1
        SIMULATION STEP PERFORMED
        SOURCE  1:
           SEED1:     422653999   SEED2:    1052391477</nm:simulation_information>
       <nm:sim_info nm:sim_bootstrap="0" nm:sim_seed1_01="422653999" nm:sim_seed2_01="1052391477"/>
       <nm:sim_elapsed_time>0.00</nm:sim_elapsed_time>
       <nm:estimation nm:number="1" nm:type="1">
        <nm:table_series>0</nm:table_series>
        <nm:estimation_information>
         ESTIMATION STEP OMITTED:                 YES</nm:estimation_information>
        <nm:estimation_options nm:estim_omitted="yes"/>
       </nm:estimation>
       <nm:post_process_times>
        <nm:post_elapsed_time>0.00</nm:post_elapsed_time>
        <nm:finaloutput_elapsed_time>0.00</nm:finaloutput_elapsed_time>
       </nm:post_process_times>
      </nm:problem>
     </nm:nonmem>
     <nm:stop_datetime>2020-11-23T14:15:15.394</nm:stop_datetime>
     <nm:total_cputime>0.006</nm:total_cputime>
    </nm:output>
   </so>
  </job>
  <job>
   <do>cat /opt/NONMEM/nm74gf/nmqual/log.xml</do>
   <so>
    <log>
     <logged>
      <config>
       <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
       <alias id="folder">/mnt/nm744CD</alias>
       <alias id="target">/opt/NONMEM/nm74gf</alias>
       <alias id="origin">/mnt/nmqual-8.4.0</alias>
       <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
       <alias id="mpicha">/usr/lib/x86_64-linux-gnu/libmpich.a</alias>
       <!--The meta interface groups commands that collect metadata.-->
       <do on="meta">pwd</do>
       <do on="meta">date</do>
       <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
       <do on="meta">echo $SHELL</do>
       <do on="meta">echo $USER</do>
       <do on="meta">echo $PATH</do>
       <do on="meta">head -n 5 target/util/nmfe74</do>
       <do on="meta">which gfortran</do>
       <!--The 'install' interface installs NONMEM.-->
       <do on="install">date</do>
       <do on="install">rm -rf origin/temp</do>
       <do on="install">mkdir origin/temp</do>
       <do on="install">cp -r folder/* origin/temp</do>
       <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
       <!--alters compile options in setup73-->
       <do on="install">rm -rf target</do>
       <do on="install">mkdir target</do>
       <do on="install" in="origin/temp">pwd</do>
       <do on="install" in="origin/temp">gfortran --version</do>
       <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target gfortran y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
       <do on="install">mkdir target/nmqual</do>
       <do on="install">mkdir target/nmqual/doc</do>
       <do on="install">cp $0 target/nmqual</do>
       <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
       <do on="install">cp -r origin/con target/nmqual</do>
       <!--support for processing xml docs-->
       <do on="install">cp -r origin/csv target/nmqual</do>
       <!--support for processing csv docs-->
       <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
       <!--reference modeling results-->
       <do on="install">cp -r origin/psn target/nmqual</do>
       <!--support for psn qualification-->
       <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
       <!--keep for archival purposes-->
       <do on="install">rm -rf origin/temp</do>
       <do on="install">cp -r origin/test target/nmqual</do>
       <!--supports control tests-->
       <do on="install">chmod 0777 target/license/nonmem.lic</do>
       <!--enable overwriting-->
       <do on="install">cp unlock target/license/nonmem.lic</do>
       <!--replace expired license-->
       <do on="install">cp mpicha target/mpi/mpi_ling</do>
       <!--replace default mpich archive-->
       <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
       <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
       <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
       <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74gf.diff</do>
       <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74gf.diff</do>
       <do on="install" as="xml">perl $0 $_0 meta</do>
       <to on="install">target/nmqual/log.xml</to>
       <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
       <!--Run directory and run name are required arguments.-->
       <do on="basic" as="xml">perl $0 $_0 meta</do>
       <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
       <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="basic" as="xml">cat target/nmqual/log.xml</do>
       <to on="basic">$_1/$_2.log.xml</to>
       <!--The 'run' interface expects a leading compile/execute argument.-->
       <do on="run" as="xml">perl $0 $_0 meta</do>
       <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
       <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="run" as="xml">cat target/nmqual/log.xml</do>
       <to on="run">$_2/$_3.log.xml</to>
       <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
       <do on="para" as="xml">perl $0 $_0 meta</do>
       <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
       <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
       <do on="para" as="xml">cat target/nmqual/log.xml</do>
       <to on="para">$_2/$_3.log.xml</to>
       <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
       <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
       <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
       <!--The 'qualify' interface runs a full suite of qualification tests.-->
       <do on="qualify" as="xml">perl $0 $_0 meta</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
       <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
       <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
       <to on="qualify">$_1</to>
       <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
       <do on="regress" as="xml">perl $0 $_0 meta</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
       <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
       <do on="regress" as="xml">cat target/nmqual/log.xml</do>
       <to on="regress">$_1</to>
       <!--The 'psntest' interface runs PsN control tests.-->
       <do on="psntest" as="xml">perl $0 $_0 meta</do>
       <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
       <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
       <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
       <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
       <to on="psntest">$_1</to>
       <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
       <do on="accept">echo $_</do>
       <to on="accept">$0</to>
      </config>
      <job>
       <do>date</do>
       <so>Thu Jan 23 18:16:45 EST 2020</so>
      </job>
      <job>
       <do>rm -rf /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do>mkdir /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nm744CD/* /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0">patch -p0 temp/SETUP74 nix/setup74.diff</do>
       <so>patching file temp/SETUP74</so>
      </job>
      <job>
       <do>rm -rf /opt/NONMEM/nm74gf</do>
       <so/>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm74gf</do>
       <so/>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0/temp">pwd</do>
       <so>/mnt/nmqual-8.4.0/temp</so>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0/temp">gfortran --version</do>
       <so>GNU Fortran (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
          Copyright (C) 2017 Free Software Foundation, Inc.
          This is free software; see the source for copying conditions.  There is NO
          warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
          </so>
      </job>
      <job>
       <do in="/mnt/nmqual-8.4.0/temp">/bin/bash SETUP74 /mnt/nmqual-8.4.0/temp /opt/NONMEM/nm74gf gfortran y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
       <so>NONMEM 7.4.4 INSTALLATION UTILITY - UNIX Bourne-Again SHell version
          For instructions, see readme_744.pdf on the CD or NONMEM installer directory
           
          SETUP74 /mnt/nmqual-8.4.0/temp /opt/NONMEM/nm74gf gfortran y ar same rec q unzip nonmem74e.zip nonmem74r.zip
          CD-ROM drive is /mnt/nmqual-8.4.0/temp
          NONMEM 7.4 directory is /opt/NONMEM/nm74gf
          Command for FORTRAN compiles is gfortran
          Optimization for Fortran compiles is y
          Command to build NONMEM archive is ar
          Sizes is same (SIZES.f90 is always used)
          Recompile is rec
           All binaries will be recompiled
          Interactive is q
          Unzip program is unzip
          Encrypted source file is nonmem74e.zip
          Unencrypted file is nonmem74r.zip
           
          To learn how to override the defaults, enter
          % SETUP74 help
           
          directory /opt/NONMEM/nm74gf
          Step 1a. Copy files from /mnt/nmqual-8.4.0/temp to /opt/NONMEM/nm74gf
          Step 1b. Copy files from /mnt/nmqual-8.4.0/temp/NONMEM_7.4.4 to /opt/NONMEM/nm74gf
           
          Installing NONMEM 7.4.4 (Enter Ctrl-C to interrupt) ...
          Step 2a. Make sub-directories of /opt/NONMEM/nm74gf
          Extract rest of files
          Choosing platform-dependent files ...
          os is Linux
          cpu is x86_64
            Will use install_Linux
          Compiler is gfortran
            Will use util/finish_Linux_gfortran
           
          === Checking compiler
          Version of gfortran is:
          GNU Fortran (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
          Copyright (C) 2017 Free Software Foundation, Inc.
          This is free software; see the source for copying conditions.  There is NO
          warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
          
           
          ===
          the compiler options are -w -O3 -ffast-math -ffpe-summary=none -xf95
          Copying NONMEM license file nonmem.lic to
          /opt/NONMEM/nm74gf/license/nonmem.lic
          Warning: the license may be expired or may expire soon.
          When this happens, NONMEM runs will fail.
          If you have a new license file from IDS, you may stop, replace
          it and restart SETUP74. Otherwise, allow NONMEM installation
          to finish at this time.
          Obtain a new license file from IDS (IDSSOFTWARE@iconplc.com)
          as as soon as possible and replace
          /opt/NONMEM/nm74gf/license/nonmem.lic
           
          Changes to License file, resource/SIZES.f90 and other resource
          files may be made here.
          Step 6. Compile resource files
          Compile of resource files was successful.
          resource directory has been compiled
          Step 9. Compile all remaining source files
          This will take a long time.
          See file /opt/NONMEM/nm74gf/progress.txt for compiler progress
          Step 10. Build NONMEM archive nm/nonmem.a
          Step 13. Create shell script util/nmfe74
          finished nmfe74
          Step 14. Create directory run
          run contains the following files:
          nmfe74 CONTROL3 CONTROL5 DATA3 THEOPP REPORT5IDS.txt
          run contains additional files
           
          Installation of NONMEM 7.4.4 is finished.
          For future reference, the command has been saved in file SETUP.TXT
           
          Please review /opt/NONMEM/nm74gf/compilemsgs.txt
                        /opt/NONMEM/nm74gf/finishmsgs.txt
          Ignore warnings. Report error messages.
           
          Help and html files and Users Guides will be installed.
          Step 15. Install NONMEM Users Guide files in /opt/NONMEM/nm74gf/guides
          Unzipping guides.zip ...
          To use the NONMEM Users Guides,
            open pdf files in /opt/NONMEM/nm74gf/guides using Adobe Reader.
          Step 16. Install On-line help files in /opt/NONMEM/nm74gf/help
          Unzipping help.zip ...
          For online help, enter (e.g.)
            cd /opt/NONMEM/nm74gf/help
            ./nmhelp advan2
          Step 17. Install HTML files in /opt/NONMEM/nm74gf/html (this may take a while) ...
          Unzipping html.zip ...
          For online help HTML files,
            open /opt/NONMEM/nm74gf/index.html in web browser
           
          Do you want to test the installation?
          Testing the installation. Commands are
              cd /opt/NONMEM/nm74gf/run
              ./nmfe74 CONTROL5 REPORT5.txt -prdefault
          If the run is successful, file REPORT5.txt will be created.
           
          Starting NMTRAN
            
           WARNINGS AND ERRORS (IF ANY) FOR PROBLEM    1
                       
           (WARNING  2) NM-TRAN INFERS THAT THE DATA ARE POPULATION.
                       
           (WARNING  43) THE $PK BLOCK REQUESTS "CALL ONCE PER INDIVIDUAL RECORD", BUT
           DATA ITEMS ARE USED IN THE $PK BLOCK. VALUES OF THESE DATA ITEMS
           SUBSEQUENT TO THOSE FROM THE FIRST EVENT RECORD WILL BE IGNORED.  IF THIS
           IS NOT APPROPRIATE, THE CALL DATA ITEM CAN BE USED TO OBTAIN ADDITIONAL
           CALLS, OR $PK'S CALLING PROTOCOL SHOULD BE CHANGED.
          Building NONMEM Executable
          Starting nonmem execution ...
          License Registered to: Temporary license for Installation of NONMEM 7.4.4
          Expiration Date:    12 DEC 2019
          Current Date:       23 JAN 2020
           
            **** NONMEM LICENSE HAS EXPIRED ****
            ****     NONMEM TERMINATING     ****
            **** CONTACT idssoftware@iconplc.com FOR RENEWAL ****
           
          Done with nonmem execution
          Nonmem executable was created but did not run successfully.
          This may be because the license is expired.
          Obtain a new license file from IDS (IDSSOFTWARE@iconplc.com)
          and replace
          /opt/NONMEM/nm74gf/license/nonmem.lic</so>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm74gf/nmqual</do>
       <so/>
      </job>
      <job>
       <do>mkdir /opt/NONMEM/nm74gf/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp autolog.pl /opt/NONMEM/nm74gf/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/con /opt/NONMEM/nm74gf/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/csv /opt/NONMEM/nm74gf/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.4.0/doc/nix/* /opt/NONMEM/nm74gf/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/psn /opt/NONMEM/nm74gf/nmqual</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.4.0/nix/setup74.diff /opt/NONMEM/nm74gf/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>cp /mnt/nmqual-8.4.0/temp/SETUP74 /opt/NONMEM/nm74gf/nmqual/doc</do>
       <so/>
      </job>
      <job>
       <do>rm -rf /mnt/nmqual-8.4.0/temp</do>
       <so/>
      </job>
      <job>
       <do>cp -r /mnt/nmqual-8.4.0/test /opt/NONMEM/nm74gf/nmqual</do>
       <so/>
      </job>
      <job>
       <do>chmod 0777 /opt/NONMEM/nm74gf/license/nonmem.lic</do>
       <so/>
      </job>
      <job>
       <do>cp /etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic /opt/NONMEM/nm74gf/license/nonmem.lic</do>
       <so/>
      </job>
      <job>
       <do>cp /usr/lib/x86_64-linux-gnu/libmpich.a /opt/NONMEM/nm74gf/mpi/mpi_ling</do>
       <so/>
      </job>
      <job>
       <do>cp /opt/NONMEM/nm74gf/util/nmfe74 /opt/NONMEM/nm74gf/util/nmfe74.old</do>
       <so/>
      </job>
      <job>
       <do>cp /opt/NONMEM/nm74gf/util/nmfe74 /opt/NONMEM/nm74gf/run/nmfe74.old</do>
       <so/>
      </job>
      <job>
       <do>patch -p0 -R /opt/NONMEM/nm74gf/util/nmfe74 nix/nmfe74gf.diff</do>
       <so>patching file /opt/NONMEM/nm74gf/util/nmfe74
          Hunk #1 succeeded at 5 with fuzz 1.</so>
      </job>
      <job>
       <do>patch -p0 -R /opt/NONMEM/nm74gf/run/nmfe74 nix/nmfe74gf.diff</do>
       <so>patching file /opt/NONMEM/nm74gf/run/nmfe74
          Hunk #1 succeeded at 5 with fuzz 1.</so>
      </job>
      <job>
       <do>perl autolog.pl nix/nm74gf.xml meta</do>
       <so>
        <log>
         <logged>
          <config>
           <!--Linux / Darwin with ifort compile opts for cross-platform reproducibility.-->
           <alias id="folder">/mnt/nm744CD</alias>
           <alias id="target">/opt/NONMEM/nm74gf</alias>
           <alias id="origin">/mnt/nmqual-8.4.0</alias>
           <alias id="unlock">/etc/chef/cookbooks/ifort-nonmem/files/default/nonmem.lic</alias>
           <alias id="mpicha">/usr/lib/x86_64-linux-gnu/libmpich.a</alias>
           <!--The meta interface groups commands that collect metadata.-->
           <do on="meta">pwd</do>
           <do on="meta">date</do>
           <do on="meta">perl -e 'use POSIX; print join qq(,),uname'</do>
           <do on="meta">echo $SHELL</do>
           <do on="meta">echo $USER</do>
           <do on="meta">echo $PATH</do>
           <do on="meta">head -n 5 target/util/nmfe74</do>
           <do on="meta">which gfortran</do>
           <!--The 'install' interface installs NONMEM.-->
           <do on="install">date</do>
           <do on="install">rm -rf origin/temp</do>
           <do on="install">mkdir origin/temp</do>
           <do on="install">cp -r folder/* origin/temp</do>
           <do on="install" in="origin">patch -p0 temp/SETUP74 nix/setup74.diff</do>
           <!--alters compile options in setup73-->
           <do on="install">rm -rf target</do>
           <do on="install">mkdir target</do>
           <do on="install" in="origin/temp">pwd</do>
           <do on="install" in="origin/temp">gfortran --version</do>
           <do on="install" in="origin/temp">/bin/bash SETUP74 origin/temp target gfortran y ar same rec q unzip nonmem74e.zip nonmem74r.zip</do>
           <do on="install">mkdir target/nmqual</do>
           <do on="install">mkdir target/nmqual/doc</do>
           <do on="install">cp $0 target/nmqual</do>
           <!--runtime copy of autolog.pl, uses nmqual/log.xml as config-->
           <do on="install">cp -r origin/con target/nmqual</do>
           <!--support for processing xml docs-->
           <do on="install">cp -r origin/csv target/nmqual</do>
           <!--support for processing csv docs-->
           <do on="install">cp origin/doc/nix/* target/nmqual/doc</do>
           <!--reference modeling results-->
           <do on="install">cp -r origin/psn target/nmqual</do>
           <!--support for psn qualification-->
           <do on="install">cp origin/nix/setup74.diff target/nmqual/doc</do>
           <!--keep for archival purposes-->
           <do on="install">cp origin/temp/SETUP74 target/nmqual/doc</do>
           <!--keep for archival purposes-->
           <do on="install">rm -rf origin/temp</do>
           <do on="install">cp -r origin/test target/nmqual</do>
           <!--supports control tests-->
           <do on="install">chmod 0777 target/license/nonmem.lic</do>
           <!--enable overwriting-->
           <do on="install">cp unlock target/license/nonmem.lic</do>
           <!--replace expired license-->
           <do on="install">cp mpicha target/mpi/mpi_ling</do>
           <!--replace default mpich archive-->
           <!--patch util/nmfe73 and run/nmfe73 to accept compile/execute option-->
           <do on="install">cp target/util/nmfe74 target/util/nmfe74.old</do>
           <do on="install">cp target/util/nmfe74 target/run/nmfe74.old</do>
           <do on="install">patch -p0 -R target/util/nmfe74 nix/nmfe74gf.diff</do>
           <do on="install">patch -p0 -R target/run/nmfe74 nix/nmfe74gf.diff</do>
           <do on="install" as="xml">perl $0 $_0 meta</do>
           <to on="install">target/nmqual/log.xml</to>
           <!--The 'basic' interface does not expect a compile/execute argument (nmfe73-as-modified no longer requires it).-->
           <!--Run directory and run name are required arguments.-->
           <do on="basic" as="xml">perl $0 $_0 meta</do>
           <do on="basic" in="$_1">target/util/nmfe74 $_2.ctl $_2.lst</do>
           <do on="basic" in="$_1" as="xml">if [ -e $_2.xml ];then cat $_2.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="basic" as="xml">cat target/nmqual/log.xml</do>
           <to on="basic">$_1/$_2.log.xml</to>
           <!--The 'run' interface expects a leading compile/execute argument.-->
           <do on="run" as="xml">perl $0 $_0 meta</do>
           <do on="run" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst</do>
           <do on="run" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="run" as="xml">cat target/nmqual/log.xml</do>
           <to on="run">$_2/$_3.log.xml</to>
           <!--The 'para' interface additionally expects [run].pnm to be present in the run directory.-->
           <do on="para" as="xml">perl $0 $_0 meta</do>
           <do on="para" in="$_2">target/util/nmfe74 $_1 $_3.ctl $_3.lst -parafile=$_3.pnm</do>
           <do on="para" in="$_2" as="xml">if [ -e $_3.xml ];then cat $_3.xml;else echo \&lt;nofile/\>; fi</do>
           <do on="para" as="xml">cat target/nmqual/log.xml</do>
           <to on="para">$_2/$_3.log.xml</to>
           <!--The 'test' interface invokes nmfe directly, without the compile/execute argument.-->
           <do on="test" in="target/nmqual/test">target/util/nmfe74 $_1.ctl $_1.lst</do>
           <do on="test" in="target/nmqual/test" as="xml">cat $_1.xml</do>
           <!--The 'qualify' interface runs a full suite of qualification tests.-->
           <do on="qualify" as="xml">perl $0 $_0 meta</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example5</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example6</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example7</do>
           <do on="qualify" in="target/nmqual" as="xml">perl autolog.pl log.xml test example10</do>
           <do on="qualify" as="xml">cat target/nmqual/log.xml</do>
           <to on="qualify">$_1</to>
           <!--The 'regress' interface runs a reduced suite of tests quickly, e.g. for regression testing.-->
           <do on="regress" as="xml">perl $0 $_0 meta</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 3</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 4</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 5</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 6</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 7</do>
           <do on="regress" in="target/nmqual" as="xml">perl autolog.pl log.xml test 8</do>
           <do on="regress" as="xml">cat target/nmqual/log.xml</do>
           <to on="regress">$_1</to>
           <!--The 'psntest' interface runs PsN control tests.-->
           <do on="psntest" as="xml">perl $0 $_0 meta</do>
           <do on="psntest" in="target/nmqual/psn">execute -directory=runs -seed=1 TST33611.nmctl TST33612.nmctl TST33613.nmctl</do>
           <do on="psntest" in="target/nmqual/psn">bootstrap -samples=20 -dir=boot -seed=1 TST3362.nmctl</do>
           <do on="psntest" in="target/nmqual/psn/runs" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST33611.csv</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/csv2xml.pl raw_results_TST3362.csv</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl '^means' bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
           <do on="psntest" in="target/nmqual/psn/boot" as="xml">perl target/nmqual/csv/sections2csv.pl standard.error.confidence.intervals bootstrap_results.csv | perl target/nmqual/csv/csv2xml.pl</do>
           <do on="psntest" as="xml">cat target/nmqual/log.xml</do>
           <to on="psntest">$_1</to>
           <!--The 'accept' interface embeds an acceptance statement at the end of the log.-->
           <do on="accept">echo $_</do>
           <to on="accept">$0</to>
          </config>
          <job>
           <do>pwd</do>
           <so>/mnt/nmqual-8.4.0</so>
          </job>
          <job>
           <do>date</do>
           <so>Thu Jan 23 18:20:53 EST 2020</so>
          </job>
          <job>
           <do>perl -e 'use POSIX; print join qq(,),uname'</do>
           <so>Linux,ip-10-0-1-244,4.15.0-1057-aws,#59-Ubuntu SMP Wed Dec 4 10:02:00 UTC 2019,x86_64</so>
          </job>
          <job>
           <do>echo $SHELL</do>
           <so>/bin/bash</so>
          </job>
          <job>
           <do>echo $USER</do>
           <so>root</so>
          </job>
          <job>
           <do>echo $PATH</do>
           <so>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin</so>
          </job>
          <job>
           <do>head -n 5 /opt/NONMEM/nm74gf/util/nmfe74</do>
           <so>#!/bin/bash
                     dir=/opt/NONMEM/nm74gf
                     f=gfortran
                     o=' -w -O3 -ffast-math -ffpe-summary=none '
                     opstat=' -static '</so>
          </job>
          <job>
           <do>which gfortran</do>
           <so>/usr/bin/gfortran</so>
          </job>
         </logged>
        </log>
       </so>
      </job>
     </logged>
    </log>
   </so>
  </job>
 </logged>
</log>
